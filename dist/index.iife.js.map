{"version":3,"file":"index.iife.js","sources":["../src/index.ts"],"sourcesContent":["import * as mongodb from \"mongodb\" ;\nimport type {GridFSFile,} from \"mongodb\" ;\n\n/**\n * create a gridFS bucket object to store files into mongodb\n * @example\n * import mongoose = require('mongoose');\n * import gridfs = require('gridfs-extra')\n * const connection = mongoose.createConnection(\"mongodb://localhost:27017/test\")\n * if (connection.readyState !== 1){\n *      throw new Error(\"Connection is not ready\")\n * }\n * const bucket = gridfs.createGridFSBucket(connection.db)\n * @param db - database\n * @param options - options for creating gridFS bucket\n * @returns a mongodb GridFSBucket object\n */\nexport function createGridFSBucket(db: mongodb.Db, options?: mongodb.GridFSBucketOptions): mongodb.GridFSBucket {\n    return new mongodb.GridFSBucket(\n        db,\n        options\n    ) ;\n}\n\n/**\n * writeFileWithStream store a file into gridFS bucket using the provided stream. This function will overwrite the\n *\n *\n * @example\n * const uploadStream = bucket.openUploadStream(\"example.txt\") ;\n * const gridFsFile = await writeFileWithStream(uploadStream, file) ;\n * @param uploadStream - The stream to upload file to mongodb\n * @param file - the file to save into mongodb bucket\n * @returns a promise that resolves to a GridFSFile\n * @throws Error\n */\nexport async function writeFileWithStream(uploadStream: mongodb.GridFSBucketWriteStream, file: Buffer): Promise<GridFSFile> {\n    uploadStream.write(file) ;\n    return new Promise((resolve, reject) => {\n        uploadStream.once(\"error\", (err) => {\n            reject(err) ;\n        }) ;\n        uploadStream.end((err, gridFsFile) => {\n            if (err !== undefined || gridFsFile === undefined){\n                reject(err) ;\n            }else {\n                resolve(gridFsFile) ;\n            }\n        }) ;\n    }) ;\n}\n/**\n * readFileByName stores file into gridFS bucket by fileName\n *\n * @param bucket - a mongodb gridFS bucket\n * @param file - the file to save into mongodb bucket\n * @param fileName - name of file to store\n * @param options - options for opening download stream\n * @returns a promise that resolves to a GridFSFile\n * @throws Error\n */\nexport async function writeFileByName(bucket: mongodb.GridFSBucket, file: Buffer, fileName: string, options?: mongodb.GridFSBucketWriteStreamOptions): Promise<GridFSFile> {\n    const uploadStream = bucket.openUploadStream(fileName, options) ;\n    return writeFileWithStream(uploadStream, file) ;\n}\n\n/**\n * readFileByName stores file into gridFS bucket by id\n *\n * @param bucket - a mongodb gridFS bucket\n * @param id - objectId of file to read\n * @param file - the file to save into mongodb bucket\n * @param fileName - name of file to store\n * @param options - options for opening download stream\n * @returns a promise that resolves to a GridFSFile\n * @throws Error\n */\nexport async function writeFileById(bucket: mongodb.GridFSBucket, id: mongodb.ObjectId, file: Buffer,  fileName: string, options?: mongodb.GridFSBucketWriteStreamOptions): Promise<GridFSFile> {\n    const uploadStream = bucket.openUploadStreamWithId(id, fileName, options) ;\n    return writeFileWithStream(uploadStream, file) ;\n}\n\n/**\n * readFileWithStream reads a file from gridFS bucket using the provided stream\n *\n * @example\n * const stream = bucket.openDownloadStreamByName(\"example.txt\") ;\n * const buffer = await readFileWithStream(stream) ;\n * @param downloadStream - The stream to download file from mongodb\n * @returns returns a promise that resolves to a Buffer\n */\nexport async function readFileWithStream(downloadStream: mongodb.GridFSBucketReadStream): Promise<Buffer> {\n    const chunks: Buffer[] = [] ;\n    let size = 0 ;\n\n    downloadStream.on(\"readable\", () => {\n        let chunk: Buffer  | null  = downloadStream.read() as Buffer | null ;\n        while (chunk !== null) {\n            chunks.push(chunk) ;\n            size += chunk.length ;\n            chunk = downloadStream.read() as Buffer | null ;\n        }\n    }) ;\n\n    return new Promise((resolve) => {\n        downloadStream.on(\"end\", () => {\n            resolve(Buffer.concat(chunks, size)) ;\n        }) ;\n    }) ;\n}\n\n/**\n * readFileByName returns Buffer read from specified file stored in mongodb bucket by fileName\n *\n * @param bucket - a mongodb gridFS bucket\n * @param fileName - name of file to read\n * @param options - options for opening download stream\n * @returns a promise that resolves to a Buffer\n */\nexport async function readFileByName(bucket: mongodb.GridFSBucket, fileName: string, options?: mongodb.GridFSBucketReadStreamOptionsWithRevision): Promise<Buffer> {\n    const stream = bucket.openDownloadStreamByName(fileName, options) ;\n    return await readFileWithStream(stream) ;\n}\n\n/**\n * readFileByName returns Buffer read from specified file stored in mongodb bucket by objectId\n *\n * @param bucket - a mongodb gridFS bucket\n * @param id - objectId of file to read\n * @param options - options for opening download stream\n * @returns a promise that resolves to a Buffer\n */\nexport async function readFileById(bucket: mongodb.GridFSBucket, id: mongodb.ObjectId, options?: mongodb.GridFSBucketReadStreamOptionsWithRevision): Promise<Buffer> {\n    const stream = bucket.openDownloadStream(id, options) ;\n    return await readFileWithStream(stream) ;\n}\n\n"],"names":["mongodb"],"mappings":"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"}